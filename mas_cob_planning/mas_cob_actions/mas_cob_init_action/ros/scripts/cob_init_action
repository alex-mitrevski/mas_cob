#!/usr/bin/env python
import rospy
import smach

from smach_ros import ActionServerWrapper, IntrospectionServer

from mas_cob_init_action.msg import InitRobotAction
from mas_cob_init_action.action_states import (SetupInitRobot, InitRobot,
                                               SetActionLibResult)


class InitRobotSkill(smach.StateMachine):
    def __init__(self, timeout=10):
        smach.StateMachine.__init__(self,
                                    outcomes=['OVERALL_SUCCESS',
                                              'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['init_robot_goal'],
                                    output_keys=['init_robot_feedback',
                                                 'init_robot_result'])

        arm_name = rospy.get_param('~arm_name', 'arm')
        arm_recover_srv_name = rospy.get_param('~arm_recover_srv_name',
                                               '/arm_controller/lwr_node/recover')

        with self:
            smach.StateMachine.add('SETUP_INIT_ROBOT', SetupInitRobot(),
                                   transitions={'succeeded': 'INIT_ROBOT',
                                                'failed': 'SETUP_INIT_ROBOT'})

            smach.StateMachine.add('INIT_ROBOT', InitRobot(arm_name=arm_name,
                                                           arm_recover_srv_name=arm_recover_srv_name),
                                   transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                'failed': 'SET_ACTION_LIB_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILED',
                                   SetActionLibResult(False),
                                   transitions={'succeeded': 'OVERALL_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS',
                                   SetActionLibResult(True),
                                   transitions={'succeeded': 'OVERALL_SUCCESS'})


if __name__ == '__main__':
    rospy.init_node('init_robot_server')

    # construct state machine
    sm = InitRobotSkill()

    # smach viewer
    sis = IntrospectionServer('init_robot_smach_viewer', sm,
                              '/init_robot_SMACH_VIEWER')
    sis.start()

    asw = ActionServerWrapper(
        server_name='init_robot_server',
        action_spec=InitRobotAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='init_robot_goal',
        feedback_key='init_robot_feedback',
        result_key='init_robot_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
