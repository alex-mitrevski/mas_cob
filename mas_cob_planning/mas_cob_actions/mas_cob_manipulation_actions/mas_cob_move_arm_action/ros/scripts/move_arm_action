#!/usr/bin/env python
import rospy
import smach

from smach_ros import ActionServerWrapper, IntrospectionServer

from mas_cob_move_arm_action.msg import MoveArmAction
from mas_cob_move_arm_action.action_states import (SetupMoveArm, MoveArm,
                                                   SetActionLibResult)


class MoveArmSkill(smach.StateMachine):
    def __init__(self, timeout=10):
        smach.StateMachine.__init__(self,
                                    outcomes=['OVERALL_SUCCESS',
                                              'OVERALL_FAILED', 'PREEMPTED'],
                                    input_keys=['move_arm_goal'],
                                    output_keys=['move_arm_feedback',
                                                 'move_arm_result'])

        arm_name = rospy.get_param('~arm_name', 'arm')

        with self:
            smach.StateMachine.add('SETUP_MOVE_ARM', SetupMoveArm(),
                                   transitions={'succeeded': 'MOVE_ARM',
                                                'failed': 'SETUP_MOVE_ARM'})

            smach.StateMachine.add('MOVE_ARM', MoveArm(arm_name=arm_name),
                                   transitions={'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                                'failed': 'SET_ACTION_LIB_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_FAILED',
                                   SetActionLibResult(False),
                                   transitions={'succeeded': 'OVERALL_FAILED'})

            smach.StateMachine.add('SET_ACTION_LIB_SUCCESS',
                                   SetActionLibResult(True),
                                   transitions={'succeeded': 'OVERALL_SUCCESS'})


if __name__ == '__main__':
    rospy.init_node('move_arm_server')

    # construct state machine
    sm = MoveArmSkill()

    # smach viewer
    sis = IntrospectionServer('move_arm_smach_viewer', sm,
                              '/MOVE_ARM_SMACH_VIEWER')
    sis.start()

    asw = ActionServerWrapper(
        server_name='move_arm_server',
        action_spec=MoveArmAction,
        wrapped_container=sm,
        succeeded_outcomes=['OVERALL_SUCCESS'],
        aborted_outcomes=['OVERALL_FAILED'],
        preempted_outcomes=['PREEMPTED'],
        goal_key='move_arm_goal',
        feedback_key='move_arm_feedback',
        result_key='move_arm_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()
