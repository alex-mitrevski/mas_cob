#!/usr/bin/python

import sys

import rospy

import smach
import smach_ros

import mdr_actions.action_states as skills
import mcr_states.common.basic_states as gbs
import mdr_common_states.common_states_speech as gss
import mdr_common_states.common_states_navigation as gns
import mdr_common_states.common_states as gcs

# main
def main():
    rospy.init_node('robot_inspection_test')

    SM = smach.StateMachine(outcomes=['done'])

    with SM:
        smach.StateMachine.add('WAIT_FOR_DOOR',
                               gcs.wait_for_door(timeout=10.0),
                               transitions={'succeeded': 'CLEAR_COSTMAPS',
                                            'timeout': 'WAIT_FOR_DOOR'})
 
        smach.StateMachine.add('CLEAR_COSTMAPS',
                               gcs.clear_costmaps(),
                               transitions={'success': 'MOVE_THROUGH_DOOR',
                                            'failed': 'MOVE_THROUGH_DOOR'})

        smach.StateMachine.add('MOVE_THROUGH_DOOR',
                               gns.direct_base_timed(timeout=15.0),
                               transitions={'success': 'CLEAR_COSTMAPS_AGAIN'})
        
        smach.StateMachine.add('CLEAR_COSTMAPS_AGAIN',
                               gcs.clear_costmaps(),
                               transitions={'success': 'MOVE_TO_WAYPOINT_1',
                                            'failed': 'MOVE_TO_WAYPOINT_1'})

        smach.StateMachine.add('MOVE_TO_WAYPOINT_1',
                               skills.move_base_safe('WAYPOINT-1', timeout=60.0),
                               transitions={'succeeded': 'INTRODUCE_SELF',
                                            'failed': 'MOVE_TO_WAYPOINT_1'})

        smach.StateMachine.add('INTRODUCE_SELF',
                               gss.say_state("Hello, my name is Jenny. I am waiting for the QR code."),
                               transitions={'success': 'WAIT_FOR_CONTINUE_QR'})
        
        # Waypoint 2:
        #    - Waypoint 2 will be blocked by an obstacle.
        #    - TODO: must determine type of obstacle
        #    - TODO: must announce type of obstacle and request it to be moved
        #    - TODO: continue to Waypoint 2.
        #
        smach.StateMachine.add('WAIT_FOR_CONTINUE_QR',
                               gcs.wait_for_qr(message='continue', timeout=600.0),
                               transitions={'succeeded': 'CONFIRM_QR_CODE',
                                            'timeout': 'WAIT_FOR_CONTINUE_QR'})

        smach.StateMachine.add('CONFIRM_QR_CODE',
                               gss.say_state("Okay, I will go to the exit now"),
                               transitions={'success': 'MOVE_TO_EXIT_PRE'})

        smach.StateMachine.add('MOVE_TO_EXIT_PRE',
                               skills.move_base_safe('PRE-EXIT', timeout=60.0),
                               transitions={'succeeded': 'MOVE_TO_EXIT',
                                            'failed': 'MOVE_TO_EXIT'})

        smach.StateMachine.add('MOVE_TO_EXIT',
                               skills.move_base_safe('EXIT', timeout=60.0),
                               transitions={'succeeded': 'done',
                                            'failed': 'MOVE_TO_EXIT'})


    # Start SMACH viewer
    smach_viewer = smach_ros.IntrospectionServer('ROBOT_INSPECTION_TEST', SM, 'ROBOT_INSPECTION_TEST')
    smach_viewer.start()

    result = SM.execute()

    # stop SMACH viewer
    while (result is None):
        rospy.spin()
    rospy.loginfo('Navigation test is done.')
    # smach_thread.stop()
    smach_viewer.stop()

if __name__ == '__main__':
    main()
