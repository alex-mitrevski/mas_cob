#!/usr/bin/env python
import rospy
import smach
from smach_ros import ActionServerWrapper

from mdr_move_tray.msg import MoveTrayAction
from mdr_move_tray.action_states import SetupMoveTray, MoveTray, SetActionLibResult

def main():
    rospy.init_node('move_tray_server')

    sm = smach.StateMachine(
            outcomes=['OVERALL_SUCCESS', 'OVERALL_FAILED'],
            input_keys=['move_tray_goal'],
            output_keys=['move_tray_feedback', 'move_tray_result'])

    with sm:
        smach.StateMachine.add('SETUP_MOVE_TRAY', SetupMoveTray(),
                               transitions = {'succeeded': 'MOVE_TRAY',
                                            'failed': 'SETUP_MOVE_TRAY'})

        smach.StateMachine.add('MOVE_TRAY', MoveTray(),
                               transitions = {'succeeded': 'SET_ACTION_LIB_SUCCESS',
                                            'failed': 'SET_ACTION_LIB_FAILED'})

        smach.StateMachine.add('SET_ACTION_LIB_FAILED', SetActionLibResult(False),
                               transitions = {'succeeded': 'OVERALL_FAILED'})

        smach.StateMachine.add('SET_ACTION_LIB_SUCCESS', SetActionLibResult(True),
                               transitions = {'succeeded': 'OVERALL_SUCCESS'})

    asw = ActionServerWrapper(
        server_name = 'move_tray_server',
        action_spec = MoveTrayAction,
        wrapped_container = sm,
        succeeded_outcomes = ['OVERALL_SUCCESS'],
        aborted_outcomes = ['OVERALL_FAILED'],
        preempted_outcomes = ['PREEMPTED'],
        goal_key = 'move_tray_goal',
        feedback_key = 'move_tray_feedback',
        result_key = 'move_tray_result')

    # Run the server in a background thread
    asw.run_server()
    rospy.spin()

if __name__ == '__main__':
    main()
