#!/usr/bin/python

import sys

import rospy

import smach
import smach_ros

# import mdr_move_base_safe.action_states as skills
# import mcr_states.common.basic_states as gbs
# import mdr_common_states.common_states_speech as gss
# import mdr_common_states.common_states_navigation as gns
# import mdr_common_states.common_states as gcs


class Dummy(smach.State):
    def __init__(self, msg="", timeout=5):
        # super(Dummy, self).__init__(self, outcomes=['succeeded', 'failed'])
        smach.State.__init__(self, outcomes=['succeeded', 'failed'])
        self.timeout = timeout
        self.msg = msg

    def execute(self, userdata):
        rospy.loginfo(self.msg)
        rospy.sleep(self.timeout)  # Just for debugging purposes
        return 'succeeded'


class RobotInspection(smach.StateMachine):
    """The  Robot Inspection state machine."""
    def __init__(self):
        # super(RobotInspection, self).__init__()
        smach.StateMachine.__init__(self, outcomes=['DONE', 'TIMEOUT'])
        self.userdata.tray_position = 'DOWN'
        self.userdata.last_command = ''

        with self:
            # Add states here as normal
            smach.StateMachine.add('WAIT_FOR_DOOR',
                                   Dummy(msg="Wating for door",
                                         timeout=10.0),
                                   transitions={'succeeded': 'ENTER',
                                                'failed': 'WAIT_FOR_DOOR'})

            smach.StateMachine.add('ENTER',
                                   Dummy(msg="Moving through door",
                                         timeout=15.0),
                                   transitions={'succeeded': 'CLEAR_COSTMAPS',
                                                'failed': 'ENTER'})

            smach.StateMachine.add('CLEAR_COSTMAPS',
                                   Dummy(msg="Clearing costmaps again"),
                                   transitions={'succeeded': 'GO_TO_WP1',
                                                'failed': 'GO_TO_WP1'})

            smach.StateMachine.add('GO_TO_WP1',
                                   Dummy(msg="Moving to inspection point",
                                         timeout=60.0),
                                   transitions={'succeeded': 'INTRODUCE_SELF',
                                                'failed': 'GO_TO_WP1'})

            smach.StateMachine.add('INTRODUCE_SELF',
                                   Dummy("Hello, my name is Jenny."
                                         "I am waiting for the QR code."),
                                   transitions={'succeeded': 'WAIT_FOR_CMD',
                                                'failed': 'WAIT_FOR_CMD'})

            # Instead of failed transition was timeout
            smach.StateMachine.add('WAIT_FOR_CMD',
                                   Dummy(msg="Waiting for tray command"),
                                   transitions={'succeeded': 'ACKNOWLEDGE_CMD',
                                                'failed': 'WAIT_FOR_CMD'})

            smach.StateMachine.add('ACKNOWLEDGE_CMD',
                                   Dummy("Received tray command"),
                                   transitions={'succeeded': 'MOVE_TRAY',
                                                'failed': 'WAIT_FOR_CMD'})

            # Transitions were tray_up and tray_down
            smach.StateMachine.add('MOVE_TRAY',
                                   Dummy("Moving tray"),
                                   transitions={'failed': 'WAIT_FOR_CMD',
                                                'succeeded': 'E-STOP_TEST'})

            smach.StateMachine.add('E-STOP_TEST',
                                   Dummy("Emergency stop test"),
                                   transitions={'succeeded': 'WAIT_FOR_QR',
                                                'failed': 'WAIT_FOR_QR'})

            # Original state was timeout instead of failed
            smach.StateMachine.add('WAIT_FOR_QR',
                                   Dummy(msg='Waiting for QR code',
                                         timeout=5.0),
                                   transitions={'succeeded': 'CONFIRM_QR_CODE',
                                                'failed': 'E-STOP_TEST'})

            smach.StateMachine.add('CONFIRM_QR_CODE',
                                   Dummy("Okay, I will go to the exit now"),
                                   transitions={'succeeded': 'GO_TO_EXIT',
                                                'failed': 'CONFIRM_QR_CODE'})

            smach.StateMachine.add('GO_TO_EXIT',
                                   Dummy(msg='Moving to exit pre'),
                                   transitions={'succeeded': 'EXIT',
                                                'failed': 'EXIT'})

            smach.StateMachine.add('EXIT',
                                   Dummy(msg="Moving to exit"),
                                   transitions={'succeeded': 'DONE',
                                                'failed': 'EXIT'})


def main():
    rospy.init_node('robot_inspection')

    SM = RobotInspection()

    # Start SMACH viewer
    smach_viewer = smach_ros.IntrospectionServer('robot_inspection', SM,
                                                 'ROBOT_INSPECTION')
    smach_viewer.start()

    result = SM.execute()
    # stop SMACH viewer
    while (result is None):
        rospy.spin()
    rospy.loginfo('Robot inspection complete.')
    smach_viewer.stop()


if __name__ == '__main__':
    main()
